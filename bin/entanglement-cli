#!/usr/bin/python3
# Copyright (C) 2017, Hadron Industries, Inc.
# Entanglement is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3
# as published by the Free Software Foundation. It is distributed
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the file
# LICENSE for details.


import argparse, asyncio, importlib, logging, sys, os.path
_entanglement = os.path.join(os.path.dirname(__file__), '../entanglement')
if os.path.exists(_entanglement):
    sys.path.append(os.path.join(_entanglement,'..'))

from sqlalchemy import create_engine
from entanglement  import SyncServer, SqlSyncDestination, sync_session_maker,  SqlSynchronizable, sync_manager_destinations
from entanglement.sql import reflect
from entanglement.sql.internal import sql_meta_messages, IHave
from entanglement.util import certhash_from_file, CertHash
import entanglement.sql

async def monitor_task():
    while True:
        await asyncio.sleep(3)
        if list(server.connections):
            outstanding_i_haves = [ c.dest.i_have_task for c in server.connections if c.dest.i_have_task]
            if outstanding_i_haves: await outstanding_i_haves
        for d in server.destinations:
            if d.protocol is None: continue
            i_have = IHave()
            i_have.epoch = d.outgoing_epoch
            i_have.serial = d.outgoing_serial
            i_have = IHave.sync_receive(i_have.to_sync())
            d.i_have_task = server.loop.create_task(sql_meta_messages.handle_i_have(i_have, d, server))
        sync_manager_destinations(server)
    
parser = argparse.ArgumentParser()
parser.add_argument('--db', required=True,
                    help = "Database URI")
parser.add_argument('--base',
                    nargs = '*',
                    dest = 'bases',
                    help = "sql_sync_declarative_bases to import and process")
parser.add_argument('--reflect', action='store_true',
                    help = "AUtomatically construct a sql_sync_declarative_base for the schema; modify existing tables to add synchronization instrumentation; add triggers to update serial numbers; and synchronize objects.",
                    )

mode_group = parser.add_mutually_exclusive_group(required = True)
mode_group.add_argument('--add-destination', dest="mode", const="add_destination", action="store_const",
                        help = "Add a destination")
mode_group.add_argument('--remove-destination', dest='mode',
                        const = 'remove_destination', action = 'store_const',
                        help = "Remove a destination by cert_hash")
mode_group.add_argument('--list-destinations', dest="mode", const="list_destinations", action="store_const",
                        help = "List all destinations")
mode_group.add_argument('--server', const = 'server',
                        dest ='mode', action='store_const',
                        help = "Run a synchronization server")

parser.add_argument('--ca')
parser.add_argument('--cert',
                    help = "Certificate file for server or to compute cert_hash for destination")

parser.add_argument('--key',
                    help = "Key file for certificate if not included in the certificate file")
parser.add_argument('--cert-hash --dest-hash --dest_hash --cert_hash',
                    type = CertHash,
                    help = "URL-safe Base 64 encoding of sha-256 hash of the DER encoded certificate")
parser.add_argument('--host',
                    help = "Host name for destination")
parser.add_argument('--port', help = "port for server",
                    default = 9120,
                    type = int)
parser.add_argument('--bw-per-sec')
parser.add_argument('--sql-verbose',
                    help = "Print generated SQL",
                    action = "store_true",
                    default = False)
parser.add_argument('--protocol-verbose',
                    action = 'store_true',
                    default = False,
                    help = "Print protocol messages")


parser.add_argument('--verbose',
                    action = 'store_true',
                    default = False,
                    help = "Enable debugging from the entanglement code")

args = parser.parse_args()

if args.cert and not args.cert_hash:
    args.cert_hash = certhash_from_file(args.cert)

    if args.mode != "server" and not args.cert_hash:
        parser.error("Must specify cert_hash when manipulating destinations")
        
if args.mode == "server" and not args.cert:
    parser.error("Certificate required when starting a server")
registries = []
engine = create_engine(args.db, echo = args.sql_verbose)
entanglement.sql.SqlSyncRegistry.create_bookkeeping(engine)

logging.basicConfig(level = 'ERROR')

if args.verbose:
    logging.getLogger('entanglement').setLevel('DEBUG')
if args.protocol_verbose:
    logging.getLogger('entanglement.protocol').setLevel('DEBUG')
if args.reflect:
    base = reflect.sync_map_base(bind = engine)
    reflect.reflect_and_prepare(base, bind = engine)
    registries.append(base.registry)
for b in (args.bases or []):
    module, obj = b.rsplit('.',1)
    module = importlib.import_module(module)
    obj = getattr(module, obj)
    if issubclass(obj, SqlSynchronizable):
        obj.metadata.create_all(bind = engine)
        obj.registry.sessionmaker.configure(bind = engine)
        registries.append(obj.registry)
    else: registries.append(obj)
        

session = sync_session_maker(bind = engine)()
if args.mode == "add_destination":
    dest = SqlSyncDestination(cert_hash = args.cert_hash,
                              name = args.host or "incoming",
                              host = args.host)
    session.add(dest)
    session.commit()

elif args.mode == "remove_destination":
    dest = session.query(SqlSyncDestination).filter_by(dest_hash = args.cert_hash).first()
    if dest is None: parser.error("Unable to find destination with cert_hash {}".format(args.cert_hash))
    session.delete(dest)
    session.commit()

elif args.mode == "list_destinations":
    dests = session.query(SqlSyncDestination).all()
    print('Destinations:')
    for dest in dests:
        print(dest)

elif args.mode == "server":
    if not args.ca:
        parser.error("CA is required when running a server")
    server = SyncServer(cert = args.cert,
                        cafile = args.ca,
                        key = args.key, port = args.port,
                        registries = registries)
    sync_manager_destinations(server, session)
    if not hasattr(server, 'session'):
        server.session = session
    server.loop.create_task(monitor_task())
    server.loop.run_forever()
